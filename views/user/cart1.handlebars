<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{{title}}</title>
  <link rel="stylesheet" href="/stylesheets/style.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous" />

  <style>
    body::after {
      content: "";
      background-image: url(/public/images/empty-cart.svg);
      background-size: cover;
      background-position: center;
      opacity: 0.5;
      /* Adjust the opacity value as per your preference */
      position: fixed;
      top: 0;
      left: 0;
      width: 80%;
      height: 80%;
      z-index: -1;
    }
  </style>
</head>

{{!--

<body style="background-image: url(/public/images/jean-philippe-delberghe-75xPHEQBmvA-unsplash.jpg);"> --}}

  <body>
    {{>header}}
    <div style="height: 14vh;"></div>
    <div class="container mt-5 mb-5">
      <h1>Shopping Cart</h1>
      <div class="row">
        <h1 class="mt-5">{{message}}</h1>
        <div class="col-md-8">
          {{#each products}}
          <div class="cardDataClass card cart-item-card mt-3 d-flex" style="background-color: rgb(255, 255, 255);">
            <div class="row no-gutters">
              <div class="col-md-4 ">
                {{!-- {{#each this.images}} --}}
                {{!-- <img src="/public/images
              /products/{{this}}" alt="{{this.name}}"> --}}
                <a href="/loadProductview?id={{this._id}}" style="text-decoration:none;">
                  <img src= style="width: 100%;" alt="{{this.name}}"></a>
                {{!-- {{/each}} --}}
              </div>


              <div class="col-md-8 mt-2">
                <div class="card-body">
                  <a href="/loadProductview?id={{this._id}}" style="text-decoration:none; color: black;">
                    <h5 class="card-title"> </h5>
                  </a>
                  <p class="details">Price: ₹{{this.price}}</p>
                  <p>Size:<span class="ms-2">{{this.size}}</span></p>

                  <button class="btn btn-link px-2"
                    onclick="this.parentNode.querySelector('input[type=number]').stepDown();this.parentNode.querySelector('.quantityInput').dispatchEvent(new CustomEvent('change'));">
                    <i class="fas fa-minus"></i>
                  </button>
                  <div hidden>
                    <div class="product_id">{{this._id}}</div>
                    <div class="originalPriceClass">{{this.price}}</div>
                    <div class="sizeClass">{{this.size}}</div>

                  </div>

                  <!-- QUANTITY -->
                  <input type="number" style="width: 10%;appearance: textfield;min-width: 30px;" name="quantity" id="" class="quantityInput" value="{{this.quantity}}" min="1">

                  <button class="btn btn-link px-2"
                    onclick="this.parentNode.querySelector('input[type=number]').stepUp();this.parentNode.querySelector('.quantityInput').dispatchEvent(new CustomEvent('change'));">
                    <i class="fas fa-plus"></i>
                  </button>


                  <p class="price">Total: ₹<span class="totalPriceClass">{{this.total}}</span></p>
                  <div class="actions">

                    <a onclick="confirmRemove('{{this._id}}','{{this.size}}')" 
                      class="btn btn-danger btn-sm">Remove</a>
                    {{!-- <input type="text" name="size" value="this.size" hidden> --}}
                    {{!-- <a href="" class="btn btn-secondary btn-sm">Update</a> --}}
                  </div>
                </div> 
              </div>
            </div>
          </div>
          {{/each}}
        </div>
        <div class="col-md-4 mt-3">
          <div class="card cart-summary-card shadow">
        
            <div class="card-body">
              <h5 class="card-title">Order Summary</h5>
              <table class="table">
                <tbody>
                  <tr>
                    <td>Subtotal</td>
                    <td class="price">₹<span id="subtotal">{{subtotal}}</span></td>
                  </tr>
                  <tr>
                    <td>Shipping</td>
                    <td class="price">₹<span id="shipping-price">{{shipping}}</span></td>
                  </tr>
                  <tr>
                    <td><strong>Total</strong></td>
                    <td class="total"><strong>₹<span id="finalAmount">{{finalAmount}}</span></strong></td>
                    <input type="text" name="tot" value="{{finalAmount}}" hidden>
                  </tr>
                </tbody>
              </table>
              <a href="/checkout?total={{total}}" class="btn btn-primary btn-block" id="checkoutBtn">Proceed to
                Checkout</a>
            </div>
        
          </div>
        </div>
      </div>
    </div>
    {{>userfooter}}
    
    <script>

      document.addEventListener('DOMContentLoaded', () => {
        const finalAmount = document.getElementById('finalAmount');
        const subtotal = document.getElementById('subtotal');
        const shippingPriceEl = document.getElementById('shipping-price');
        const cardDataArray = Array.from(document.getElementsByClassName('cardDataClass'));

        cardDataArray.map(cardData => {
          const quantityInput = cardData.querySelector('.quantityInput');
          const originalPrice = cardData.querySelector('.originalPriceClass');
          const totalPriceEl = cardData.querySelector('.totalPriceClass');

          quantityInput.addEventListener('change', () => {
            const totalPrice = quantityInput.value * originalPrice.innerText;
            totalPriceEl.innerText = totalPrice.toString();
            totalPriceEl.dispatchEvent(new CustomEvent('TotalPriceChanged'));
            sendCartUpdateRequest();
          })

          totalPriceEl.addEventListener('TotalPriceChanged', () => {
            const sum = cardDataArray.reduce((sum, cardData) => {
              return sum + Number(cardData.querySelector('.totalPriceClass').innerText);
            }, 0);
            subtotal.innerText = sum.toString();
            subtotal.dispatchEvent(new CustomEvent('SubtotalChanged'));
          });

        });

        subtotal.addEventListener('SubtotalChanged', () => {
          if (Number(subtotal.innerText) === 0) {
            shippingPriceEl.innerText = 0;
          } else {
            shippingPriceEl.innerText = 90;
          }
          finalAmount.innerText = (Number(subtotal.innerText) + Number(shippingPriceEl.innerText)).toString();
        });

        async function sendCartUpdateRequest() {
          console.log('Hahahdhha')
          const products = cardDataArray.map(cardData => {
            const productid = cardData.querySelector('.product_id').innerText;
            const quantity = Number(cardData.querySelector('.quantityInput').value);
            const size = cardData.querySelector('.sizeClass').innerText;
            return ({
              productid,
              quantity,
              size,
              finalAmount: Number(finalAmount.innerText)
            })
          });

          const updatedCartData = { products };
          console.log(JSON.stringify(updatedCartData, null, 2))

          try {
            const response = await fetch('/cart/update', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(updatedCartData),
            });

            const resBody = await response.text();
            console.info(resBody);
          } catch (err) {
            console.error(err);
          }
        }
        const checkoutBtn = document.getElementById('checkoutBtn');
        checkoutBtn.addEventListener('click', async () => {
          calculateCartTotal();
          sendCartUpdateRequest();
          const totalAmount = Number(finalAmount.innerText);
          const checkoutURL = `/checkout?total=${totalAmount}`;
          window.location.href = checkoutURL;
        });



      });

    </script>
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function confirmRemove(proid,prosize) {
          console.log('yes yes')
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to remove that from Cart',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/removeFromCart/?id='+proid+'&size='+prosize
                }
            });
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
      crossorigin="anonymous"></script>
    <script src="https://kit.fontawesome.com/911ceacc93.js" crossorigin="anonymous"></script>
  </body>

</html>